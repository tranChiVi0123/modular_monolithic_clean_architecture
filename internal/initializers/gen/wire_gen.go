// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gen

import (
	"github.com/FlezzProject/platform-api/internal/app/http/handler"
	"github.com/FlezzProject/platform-api/internal/app/http/middleware"
	"github.com/FlezzProject/platform-api/internal/infrastructure/config"
	"github.com/FlezzProject/platform-api/internal/infrastructure/db"
	"github.com/FlezzProject/platform-api/internal/infrastructure/routers"
	"github.com/FlezzProject/platform-api/internal/modules/healthz/repository"
	"github.com/FlezzProject/platform-api/internal/modules/healthz/usecase"
	repository2 "github.com/FlezzProject/platform-api/internal/modules/user/repository"
	usecase2 "github.com/FlezzProject/platform-api/internal/modules/user/usecase"
)

// Injectors from wire.go:

func InitializeGatewayRouting(gatewayConfigs *config.GatewayConfigs) routers.GatewayRouter {
	healthzRepository := repository.NewHealthzRepository()
	healthzUsecase := usecase.NewHealthzUsecase(healthzRepository)
	healthzHandler := handler.NewHealthzHandler(healthzUsecase)
	baseRouter := routers.NewBaseRouter(healthzHandler)
	gatewayRouter := routers.NewGatewayRouter(gatewayConfigs, baseRouter)
	return gatewayRouter
}

func InitializeAuthRouting(dbConfig db.DbConfig, secretKey string) routers.AuthRouter {
	userRepository := repository2.NewUserRepository(dbConfig)
	userUsecase := usecase2.NewUserUsecase(userRepository)
	authHandler := handler.NewAuthHandler(userUsecase, secretKey)
	healthzRepository := repository.NewHealthzRepository()
	healthzUsecase := usecase.NewHealthzUsecase(healthzRepository)
	healthzHandler := handler.NewHealthzHandler(healthzUsecase)
	baseRouter := routers.NewBaseRouter(healthzHandler)
	authRouter := routers.NewAuthRouter(authHandler, baseRouter)
	return authRouter
}

func InitializeUserRouting(dbConfig db.DbConfig, secretKey string) routers.UserRouter {
	userRepository := repository2.NewUserRepository(dbConfig)
	userUsecase := usecase2.NewUserUsecase(userRepository)
	userHandler := handler.NewUserHandler(userUsecase)
	healthzRepository := repository.NewHealthzRepository()
	healthzUsecase := usecase.NewHealthzUsecase(healthzRepository)
	healthzHandler := handler.NewHealthzHandler(healthzUsecase)
	baseRouter := routers.NewBaseRouter(healthzHandler)
	authMiddleware := middleware.NewAuthMiddleware(userUsecase, secretKey)
	userRouter := routers.NewUserRouter(userHandler, baseRouter, authMiddleware)
	return userRouter
}
